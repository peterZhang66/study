app.json 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。

pages字段 ―― 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。
数组的第一项代表小程序的初始页面。小程序中新增/减少页面，都需要对 pages 数组进行修改。

window字段 ―― 小程序所有页面的顶部背景颜色，文字颜色定义在这里的。
是否开启下拉刷新  ,下拉背景字体、loading 图的样式，仅支持 dark/light

tabBar字段 --- 如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面）
当设置 position 为 top 时，将不会显示 icon
tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。

networkTimeout --- 可以设置各种网络请求的超时时间。

debug ---- 可以在开发者工具中开启 debug 模式，在开发者工具的控制台面板，调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发 。 可以帮助开发者快速定位一些常见的问题。



page.json  只是设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。


App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。
小程序的生命周期函数     可以在 App 的 onlaunch 和 onshow 中获取上述场景值
全局的 getApp() 函数可以用来获取到小程序实例。

js:
Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。
object 内容在页面加载时会进行一次深拷贝，需考虑数据大小对页面加载
的开销

this.setData来获取data中的数据
在小程序中所有页面的路由全部由框架进行管理。
框架以栈的形式维护了当前的所有页面。 当发生路由切换的时候，页面栈的表现如下：

初始化	        新页面入栈
打开新页面	新页面入栈
页面重定向	当前页面出栈，新页面入栈
页面返回	页面不断出栈，直到目标返回页，新页面入栈
Tab 切换	页面全部出栈，只留下新的 Tab 页面
重加载	        页面全部出栈，只留下新的页面

getCurrentPages() 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。


作用域:
在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。
模块化:
可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 module.exports 或者 exports 才能对外暴露接口。

 require 暂时不支持绝对路径
?在需要使用这些模块的文件中，使用 require(path) 将公共代码引入

API
小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。